// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional, for migrations
}

model User {
  id           String       @id // Matches Supabase auth.users.id (UUID)
  email        String?      @unique
  name         String?
  userMetadata Json? // Store user_metadata as JSON
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  //for team
  teams        Team[]       @relation("TeamOwner")
  memberships  TeamMember[]
  //for blog
  posts        Post[]

}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  excerpt   String?
  slug      String   @unique
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

// for creating a new team
model Team {
  id        String       @id @default(uuid())
  name      String
  ownerId   String
  owner     User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members   TeamMember[]
  projects  Project[]
  createdAt DateTime     @default(now())
}

model TeamMember {
  id           String   @id @default(uuid())
  teamId       String
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitedEmail String?
  role         String // e.g., "Owner", "Admin", "Member", "Guest"
  status       String   @default("pending") // "pending", "accepted"
  createdAt    DateTime @default(now())
}

model Project {
  id          String   @id @default(uuid())
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime @default(now())
}
